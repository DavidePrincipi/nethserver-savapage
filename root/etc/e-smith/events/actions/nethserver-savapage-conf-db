#!/usr/bin/perl

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use esmith::ConfigDB;
use File::Temp;
use NethServer::SSSD;
use NethServer::Password;
use JSON;
use esmith::util;
my $sssd = new NethServer::SSSD();
my $db = esmith::ConfigDB->open_ro() or die "Could not open config db";
my $record = $db->get("sssd") or die "No Workgroup in config db";

# get domain for AD domain\username
my $domain = $record->prop("Workgroup");

$fh = File::Temp->new();
my ($login,$pass,$uid,$gid) = getpwnam('postgres') or die "postgres not in passwd file";
chown $uid, $gid, $fh->filename;

# get bind password
my $secret=$sssd->bindPassword();

# get hostname
my $host = $sssd->host();

# set port
my $port = "389";

# get baseDN
my $basedn = $sssd->baseDN();

# get bindDN
my $user = $sssd->bindDN();

# set schema, ssl and authmethod
my $schema = '';
my $ssl = "N";
my $authmethod = "none";

# if AD is used

if ($sssd->isAD()) {
    $schema = 'ACTIVE_DIRECTORY';
    $authmethod = "ldap";
    $port = "636";
    $ssl = "Y";
    $user = $domain.'\savaaduser';
    $secret = NethServer::Password::store('savaaduser') || die('Could not generate savaaduser password!');
    # create savaaduser and restart samba in container
    system("systemd-run -t -M nsdc /usr/bin/samba-tool user delete savaaduser");
    system("systemd-run -t -M nsdc /usr/bin/samba-tool user create savaaduser $secret");
    system("systemd-run -t -M nsdc /usr/bin/samba-tool user setexpiry --noexpiry savaaduser");
    system("systemctl -M nsdc restart samba");
}

# if LDAP is used

if ($sssd->isLdap()) {
    $authmethod = "ldap";
    $schema = 'OPEN_LDAP';
    $user = '';
    $secret = '';
}

# if ($sssd->isLocalProvider()) {
# }

# set auth method
print("set auth method...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$authmethod' WHERE property_name = 'auth.method';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name auth.method --value \"$authmethod\"'");
#system("su - savapage -c 'savapage-db --db-config-set auth.method=\"$authmethod\"'");

# set ldap schema type
print("set ldap schema type...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$schema' WHERE property_name = 'ldap.schema.type';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name ldap.schema.type --value \"$schema\"'");
#system("su - savapage -c 'savapage-db --db-config-set ldap.schema.type=\"$schema\"'");

# set host
printf("set host...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$host' WHERE property_name = 'auth.ldap.host';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name auth.ldap.host --value \"$host\"'");
#system("su - savapage -c 'savapage-db --db-config-set auth.ldap.host=\"$host\"'");

# set port
printf("set port...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$port' WHERE property_name = 'auth.ldap.port';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name auth.ldap.port --value \"$port\"'");
#system("su - savapage -c 'savapage-db --db-config-set auth.ldap.port=\"$port\"'");

# set use ssl
printf("use ssl...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$ssl' WHERE property_name = 'auth.ldap.use-ssl';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name auth.ldap.use-ssl --value \"$ssl\"'");
#system("su - savapage -c 'savapage-db --db-config-set auth.ldap.use-ssl=\"$ssl\"'");

# set base dn
printf("set base dn...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$basedn' WHERE property_name = 'auth.ldap.basedn';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name auth.ldap.basedn --value \"$basedn\"'");
#system("su - savapage -c 'savapage-db --db-config-set auth.ldap.basedn=\"$basedn\"'");

# set admin dn
printf("set admin dn...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$user' WHERE property_name = 'auth.ldap.admin-dn';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name auth.ldap.admin-dn --value \"$user\"'");
#system("su - savapage -c 'savapage-db --db-config-set auth.ldap.admin-dn=\"$user\"'");

# set currency
printf("set currency...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = 'EUR' WHERE property_name = 'financial.global.currency-code';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name financial.global.currency-code --value \"EUR\"'");
#system("su - savapage -c 'savapage-db --db-config-set financial.global.currency-code=\"EUR\"'");

# set locale
printf("set locale...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = 'en-US' WHERE property_name = 'system.default-locale';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name system.default-locale --value \"en-US\"'");
#system("su - savapage -c 'savapage-db --db-config-set  system.default-locale=\"en-US\"'");

# set mail from
printf("set mail from...\n");
print $fh "UPDATE savapage.public.tbl_config SET property_value = 'savapage@localhost' WHERE property_name = 'mail.from.address';\n";
#system("su - savapage -c 'savapage-cmd --set-config-property --name mail.from.address --value \"savapage@localhost\"'");
#system("su - savapage -c 'savapage-db --db-config-set mail.from.address=\"savapage@localhost\"'");

# set admin password
printf("set admin pw...\n");
#system("su - savapage -c 'savapage-cmd --set-config-property --name auth.ldap.admin-password --value \"$secret\"'");
system("su - savapage -c 'savapage-db --db-config-set auth.ldap.admin-password=\"$secret\"'");

# allow self signed certs
print $fh "UPDATE savapage.public.tbl_config SET property_value = 'Y' WHERE property_name = 'auth.ldap.use-ssl.trust-self-signed';\n";

#printf("savapage-db self signed certs...\n");
system("su - savapage -c 'savapage-db --db-config-set auth.ldap.use-ssl.trust-self-signed=\"Y\"'");

# Execute SQL script - not needed anymore because of savapage-cmd
system("su - postgres -c 'psql savapage < ".$fh->filename."' >/dev/null");
