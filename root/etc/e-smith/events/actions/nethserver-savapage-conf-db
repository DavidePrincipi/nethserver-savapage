#!/usr/bin/perl

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use esmith::ConfigDB;
use File::Temp;
use NethServer::SSSD;
use NethServer::Password;
use JSON;
use esmith::util;
my $sssd = new NethServer::SSSD();
my $db = esmith::ConfigDB->open_ro() or die "Could not open config db";
my $record = $db->get("sssd") or die "No Workgroup in config db";
my $domain = $record->prop("Workgroup");

$fh = File::Temp->new();
my ($login,$pass,$uid,$gid) = getpwnam('postgres') or die "postgres not in passwd file";
chown $uid, $gid, $fh->filename;

my $encoded = '';
my $secret=$sssd->bindPassword();

# Some obsucre perl magic, thanks to Davidep - maybe needed for password encryption
#pipe RH, WH;
#open(OLDIN, "<&STDIN");
#open(STDIN, "<&RH");
#if(open(PIPE, "-|")) {
#    close(RH);
#    print WH $secret;
#    close(WH);
#    {
#        local $/ = undef;
#        $encoded = <PIPE>;
#    }
#    chomp($encoded);
#} else {
#    exec("java -classpath /usr/share/webtop/ WebtopPassEncode");
#}
#close(PIPE);
#close(RH);
#open(STDIN, "<&OLDIN");

my $host = $sssd->host();
my $port = "389";
my $basedn = $sssd->baseDN();
my $user = $sssd->bindDN();
my $schema = '';
my $ssl = "N";
my $authmethod = "none";

#if ( $sssd->startTls() ) {
#    $ssl = "Y";
#}

if ($sssd->isAD()) {
    $schema = 'ACTIVE_DIRECTORY';
    $authmethod = "ldap";
    $user = $domain.'\savaaduser';
    $secret = NethServer::Password::store('savaaduser') || die('Could not generate savaaduser password!');
    # create savaaduser and restart samba in container to activate the no strong auth patch
    system("systemd-run -t -M nsdc /usr/bin/samba-tool user delete savaaduser");
    system("systemd-run -t -M nsdc /usr/bin/samba-tool user create savaaduser $secret");
    system("systemd-run -t -M nsdc /usr/bin/samba-tool user setexpiry --noexpiry savaaduser");
    system("systemctl -M nsdc restart samba");
}

if ($sssd->isLdap()) {
    $authmethod = "ldap";
    $schema = 'OPEN_LDAP';
    $user = '';
    $encoded = '';
    $secret = '';
}

# if ($sssd->isLocalProvider()) {
# }

# set auth method
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$authmethod' WHERE property_name = 'auth.method';\n";

# set ldap schema type
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$schema' WHERE property_name = 'ldap.schema.type';\n";

# set host
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$host' WHERE property_name = 'auth.ldap.host';\n";

# set port
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$port' WHERE property_name = 'auth.ldap.port';\n";

# set use ssl
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$ssl' WHERE property_name = 'auth.ldap.use-ssl';\n";

# set base dn
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$basedn' WHERE property_name = 'auth.ldap.basedn';\n";

# set admin dn
print $fh "UPDATE savapage.public.tbl_config SET property_value = '$user' WHERE property_name = 'auth.ldap.admin-dn';\n";

# set currency
print $fh "UPDATE savapage.public.tbl_config SET property_value = 'EUR' WHERE property_name = 'financial.global.currency-code';\n";

# set locale
print $fh "UPDATE savapage.public.tbl_config SET property_value = 'en-US' WHERE property_name = 'system.default-locale';\n";

# set mail from

print $fh "UPDATE savapage.public.tbl_config SET property_value = 'savapage@localhost' WHERE property_name = 'mail.from.address';\n";

# set admin password
#print $fh "UPDATE savapage.public.tbl_config SET property_value = '$encoded' WHERE property_name = 'auth.ldap.admin-password';\n";

system("su - savapage -c 'savapage-cmd --set-config-property --name auth.ldap.admin-password --value \"$secret\"'");

# Execute SQL script
system("su - postgres -c 'psql savapage < ".$fh->filename."' >/dev/null");

# sync AD/LDAP users
system("su - savapage -c 'savapage-cmd --sync-users-and-groups'");

# restart savapage
system("systemctl restart savapage");

sleep 10;

# sync AD/LDAP users
system("su - savapage -c 'savapage-cmd --sync-users-and-groups'");
